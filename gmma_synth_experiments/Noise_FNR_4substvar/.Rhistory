# all_subst <- rownames(subst)
#
# # neutral (most stabilising subst)
# top_subst <- rownames(subst[subst$eff == "neu", ])
#
# # top5 subst
# top_ddG_subst <- subst[order(subst$ddG_glob, decreasing = FALSE), ]
# top5_subst <- rownames(top_ddG_subst[1:5, ])
#
# # top10
# top10_subst <- rownames(top_ddG_subst[1:10, ])
#
#
# ###################################
f_bind_plot(top5_subst)
f_bind_plot <- function(subst_subset){
# prepare for plotting
var_fs <- lapply(subst_subset, subst_f_bind)
var_fs <- do.call(rbind, var_fs)
fs_plot <- rbind(f_bind, var_fs)
# plot
ggplot(fs_plot, aes(x = n_subst, y = f_bind, col = subst))+
geom_point()+
geom_line()+
# scale_y_continuous(trans = "log10")+ # scale y axis log10 for easier separation of lines
labs(x ="Number of substitutions", y = "Fraction of variants binding", title = "Suppressor plot top 5 gmma fitted substitutions Laub")+
theme_cowplot()
ggsave("suppressorplot_gmma_laub_top5.png", height = 8, width = 12)
# smooth curve as gmma figure 1f
}
# # give subst to be included in plot
# ###################################
#
# # all subst
# all_subst <- rownames(subst)
#
# # neutral (most stabilising subst)
# top_subst <- rownames(subst[subst$eff == "neu", ])
#
# # top5 subst
# top_ddG_subst <- subst[order(subst$ddG_glob, decreasing = FALSE), ]
# top5_subst <- rownames(top_ddG_subst[1:5, ])
#
# # top10
# top10_subst <- rownames(top_ddG_subst[1:10, ])
#
#
# ###################################
f_bind_plot(top5_subst)
f_bind_plot <- function(subst_subset){
# prepare for plotting
var_fs <- lapply(subst_subset, subst_f_bind)
var_fs <- do.call(rbind, var_fs)
fs_plot <- rbind(f_bind, var_fs)
# plot
ggplot(fs_plot, aes(x = n_subst, y = f_bind, col = subst))+
geom_point()+
geom_line()+
# scale_y_continuous(trans = "log10")+ # scale y axis log10 for easier separation of lines
labs(x ="Number of substitutions", y = "Fraction of variants binding", title = "Suppressor plot top 5 gmma fitted substitutions Laub")+
theme_cowplot()
ggsave("suppressorplot_gmma_laub_top5.png", height = 6, width = 10)
# smooth curve as gmma figure 1f
}
# # give subst to be included in plot
# ###################################
#
# # all subst
# all_subst <- rownames(subst)
#
# # neutral (most stabilising subst)
# top_subst <- rownames(subst[subst$eff == "neu", ])
#
# # top5 subst
# top_ddG_subst <- subst[order(subst$ddG_glob, decreasing = FALSE), ]
# top5_subst <- rownames(top_ddG_subst[1:5, ])
#
# # top10
# top10_subst <- rownames(top_ddG_subst[1:10, ])
#
#
# ###################################
f_bind_plot(top5_subst)
setwd("/Users/Holm/mega/binf/thesis/gmma/synth/synth_experiments/gmma_synth_A1S_0stab_2")
chi_sq_red
getwd()
# chi_sq_red = 1/(length(global_fit$fvec)-length(global_fit$par)) * global_fit$deviance/wt$sd^2
chi_sq = global_fit$deviance/wt$sd^2
chi_sq
chi_sq_red
global_fit$deviance
global_fit
global_fit$rsstrace
global_fit$deviance
getwd()
setwd("/Users/Holm/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar")
s = sprintf("dG_wt = %.2f (true %.2f)", cp$dG_wt, dG_wt)
plot(gmma[,"synth"], gmma[,"ddG"], ylim=c(min(gmma[,"ddG"], na.rm=T)-1.0, max(gmma[,"ddG"], na.rm=T)+1.0), main=s, xlab="True ddG", ylab="Estimated ddG")
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
i = which(gmma[,"std_mean"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std_mean"], y1=gmma[i,"ddG"]+gmma[i,"std_mean"], length=0.02, angle=90, code=3, lwd=2)
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
abline(0,1)
# mark high error ddG's
points(gmma[ni,"synth"], gmma[ni,"ddG"], pch=20, col=2)
x = c(min(gmma$synth),max(gmma$synth))
lines(x, x*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"], col=2, lwd=3)
legend("topleft", c(sprintf("Points std>%.2f: %d (%d, NA's %d)", std_mean_cut, length(i), nrow(gmma), sum(is.na(gmma$ddG))), sprintf("Pearson %.3f (%.3f)",rp,rp_all),
sprintf("Spearman %.3f (%.3f)",rs,rs_all), sprintf("MAE %.3f (%.3f)",mae,mae_all),
sprintf("Std %.3f (%.3f)",std,std_all)))
legend("bottomright", sprintf("lm all ddG: %.3f*ddG + %.3f",fit1$coefficients["synth"], fit1$coefficients["(Intercept)"]), lwd=c(3,2,1), col=c(2,3,4))
options(width=300, digits=4, stringsAsFactors=F)
load("gmma_result.rda")
load("make_synthetic.rda")
gmma = read.table("prism_gmma_000_GFP_synthetic.txt", header=T)
synth = read.table("gmma_synthetic_true.txt", header=T)
common_subst = intersect(gmma$variant, synth$variant)
print(sprintf("GMMA has %d subst., synth. data %d subst. with %d subst. in common",length(gmma$variant), length(synth$variant), length(common_subst)))
stopifnot(length(gmma$variant) == length(synth$variant))
# rownames(synth) = synth$variant
gmma$synth = synth[match(gmma$variant,synth$variant),"ddG"]
rs_all = cor(gmma[,"ddG"], gmma[,"synth"], method="spearman", use="complete.obs")
rp_all = cor(gmma[,"ddG"], gmma[,"synth"], method="pearson", use="complete.obs")
std_all = sd(gmma[,"ddG"] - gmma[,"synth"], na.rm=T)/sqrt(2)
mae_all = mean(abs(gmma[,"ddG"] - gmma[,"synth"]), na.rm=T)
std_mean_cut = 1.0
i = which(gmma$std_mean < std_mean_cut)
ni = setdiff(seq(nrow(gmma)), i)
rs = cor(gmma[i,"ddG"], gmma[i,"synth"], method="spearman")
rp = cor(gmma[i,"ddG"], gmma[i,"synth"], method="pearson")
std = sd(gmma[i,"ddG"] - gmma[i,"synth"])/sqrt(2)
mae = mean(abs(gmma[i,"ddG"] - gmma[i,"synth"]))
# The first may be sensitive to high-ddG outliers which are not always expected to be well determined
fit1 = lm(ddG ~ synth, data=gmma)
# fit2 = glm(ddG ~ synth, family=gaussian, data=gmma)
# fit3 = lm(ddG ~ synth, data=gmma[which(gmma$ddG < -cp$dG_wt),])
s = sprintf("dG_wt = %.2f (true %.2f)", cp$dG_wt, dG_wt)
plot(gmma[,"synth"], gmma[,"ddG"], ylim=c(min(gmma[,"ddG"], na.rm=T)-1.0, max(gmma[,"ddG"], na.rm=T)+1.0), main=s, xlab="True ddG", ylab="Estimated ddG")
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
i = which(gmma[,"std_mean"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std_mean"], y1=gmma[i,"ddG"]+gmma[i,"std_mean"], length=0.02, angle=90, code=3, lwd=2)
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
abline(0,1)
# mark high error ddG's
points(gmma[ni,"synth"], gmma[ni,"ddG"], pch=20, col=2)
x = c(min(gmma$synth),max(gmma$synth))
lines(x, x*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"], col=2, lwd=3)
legend("topleft", c(sprintf("Points std>%.2f: %d (%d, NA's %d)", std_mean_cut, length(i), nrow(gmma), sum(is.na(gmma$ddG))), sprintf("Pearson %.3f (%.3f)",rp,rp_all),
sprintf("Spearman %.3f (%.3f)",rs,rs_all), sprintf("MAE %.3f (%.3f)",mae,mae_all),
sprintf("Std %.3f (%.3f)",std,std_all)))
legend("bottomright", sprintf("lm all ddG: %.3f*ddG + %.3f",fit1$coefficients["synth"], fit1$coefficients["(Intercept)"]), lwd=c(3,2,1), col=c(2,3,4))
# Regional correlation - mostly for tri-modal synthetic data
region_cor_plot = function(x0, x1, y_offset) {
i = which(gmma[,"synth"] < x1 & gmma[,"synth"] > x0)
if(length(i) > 1){
mx = mean(gmma[i,"synth"])
my = mean(gmma[i,"ddG"], na.rm=T)
arrows(x0=x0, x1=x1, y0=my+y_offset, angle=90, length=0.1, code=3)
correl = cor(gmma[i,"ddG"], gmma[i,"synth"], method="pearson", use="complete.obs") # leads to error for if no values exist in interval.
text(mx, my+y_offset*1.2, sprintf("Pearson %.2f",correl))
print(sprintf("Printed correlation af x,y = %.2f, %.2f",mx, my+y_offset*1.2))
return(correl)
}
else
return(NA) # return NA if no values exist in interval given
}
# automatic text position y-offset from linear fit1
ddG_mode_sep = 1.0
offest = 0.8 * ddG_mode_sep*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"]
rp_inliers = region_cor_plot(-10, 5, offest) # correlation excluding high ddG outliers
# png("eval_synth.png", width = 7, height = 7.5, units = "in", res = 100)
s = sprintf("dG_wt = %.2f (true %.2f)", cp$dG_wt, dG_wt)
plot(gmma[,"synth"], gmma[,"ddG"], ylim=c(min(gmma[,"ddG"], na.rm=T)-1.0, max(gmma[,"ddG"], na.rm=T)+1.0), main=s, xlab="True ddG", ylab="Estimated ddG")
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
i = which(gmma[,"std_mean"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std_mean"], y1=gmma[i,"ddG"]+gmma[i,"std_mean"], length=0.02, angle=90, code=3, lwd=2)
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
abline(0,1)
# mark high error ddG's
points(gmma[ni,"synth"], gmma[ni,"ddG"], pch=20, col=2)
x = c(min(gmma$synth),max(gmma$synth))
lines(x, x*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"], col=2, lwd=3)
legend("topleft", c(sprintf("Points std>%.2f: %d (%d, NA's %d)", std_mean_cut, length(i), nrow(gmma), sum(is.na(gmma$ddG))), sprintf("Pearson %.3f (%.3f)",rp,rp_all),
sprintf("Spearman %.3f (%.3f)",rs,rs_all), sprintf("MAE %.3f (%.3f)",mae,mae_all),
sprintf("Std %.3f (%.3f)",std,std_all)))
legend("bottomright", sprintf("lm all ddG: %.3f*ddG + %.3f",fit1$coefficients["synth"], fit1$coefficients["(Intercept)"]), lwd=c(3,2,1), col=c(2,3,4))
# Regional correlation - mostly for tri-modal synthetic data
region_cor_plot = function(x0, x1, y_offset) {
i = which(gmma[,"synth"] < x1 & gmma[,"synth"] > x0)
if(length(i) > 1){
mx = mean(gmma[i,"synth"])
my = mean(gmma[i,"ddG"], na.rm=T)
arrows(x0=x0, x1=x1, y0=my+y_offset, angle=90, length=0.1, code=3)
correl = cor(gmma[i,"ddG"], gmma[i,"synth"], method="pearson", use="complete.obs") # leads to error for if no values exist in interval.
text(mx, my+y_offset*1.2, sprintf("Pearson %.2f",correl))
print(sprintf("Printed correlation af x,y = %.2f, %.2f",mx, my+y_offset*1.2))
return(correl)
}
else
return(NA) # return NA if no values exist in interval given
}
# automatic text position y-offset from linear fit1
ddG_mode_sep = 1.0
offest = 0.8 * ddG_mode_sep*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"]
rp_inliers = region_cor_plot(-10, 5, offest) # correlation excluding high ddG outliers
##################
# regional spearman correlation
region_cor_plot_s = function(x0, x1, y_offset) {
i = which(gmma[,"synth"] < x1 & gmma[,"synth"] > x0)
if(length(i) > 1){
mx = mean(gmma[i,"synth"])
my = mean(gmma[i,"ddG"], na.rm=T)
arrows(x0=x0, x1=x1, y0=my+y_offset, angle=90, length=0.1, code=3)
correl = cor(gmma[i,"ddG"], gmma[i,"synth"], method="spearman", use="complete.obs") # leads to error for if no values exist in interval.
text(mx, my+y_offset*1.2, sprintf("Pearson %.2f",correl))
print(sprintf("Printed correlation af x,y = %.2f, %.2f",mx, my+y_offset*1.2))
return(correl)
}
else
return(NA) # return NA if no values exist in interval given
}
rs_inliers = region_cor_plot_s(-10, 5, offest) # correlation excluding high ddG outliers
##################
source("~/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar/eval_synth.r", echo=TRUE)
png(sprintf("eval_synth/eval_synth_%f.png", extra$scan_var), width = 7, height = 7.5, units = "in", res = 100)
# png("eval_synth.png", width = 7, height = 7.5, units = "in", res = 100)
s = sprintf("dG_wt = %.2f (true %.2f)", cp$dG_wt, dG_wt)
plot(gmma[,"synth"], gmma[,"ddG"], ylim=c(min(gmma[,"ddG"], na.rm=T)-1.0, max(gmma[,"ddG"], na.rm=T)+1.0), main=s, xlab="True ddG", ylab="Estimated ddG")
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
i = which(gmma[,"std_mean"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std_mean"], y1=gmma[i,"ddG"]+gmma[i,"std_mean"], length=0.02, angle=90, code=3, lwd=2)
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
abline(0,1)
# mark high error ddG's
points(gmma[ni,"synth"], gmma[ni,"ddG"], pch=20, col=2)
x = c(min(gmma$synth),max(gmma$synth))
lines(x, x*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"], col=2, lwd=3)
legend("topleft", c(sprintf("Points std>%.2f: %d (%d, NA's %d)", std_mean_cut, length(i), nrow(gmma), sum(is.na(gmma$ddG))), sprintf("Pearson %.3f (%.3f)",rp,rp_all),
sprintf("Spearman %.3f (%.3f)",rs,rs_all), sprintf("MAE %.3f (%.3f)",mae,mae_all),
sprintf("Std %.3f (%.3f)",std,std_all)))
legend("bottomright", sprintf("lm all ddG: %.3f*ddG + %.3f",fit1$coefficients["synth"], fit1$coefficients["(Intercept)"]), lwd=c(3,2,1), col=c(2,3,4))
# Regional correlation - mostly for tri-modal synthetic data
region_cor_plot = function(x0, x1, y_offset) {
i = which(gmma[,"synth"] < x1 & gmma[,"synth"] > x0)
if(length(i) > 1){
mx = mean(gmma[i,"synth"])
my = mean(gmma[i,"ddG"], na.rm=T)
arrows(x0=x0, x1=x1, y0=my+y_offset, angle=90, length=0.1, code=3)
correl = cor(gmma[i,"ddG"], gmma[i,"synth"], method="pearson", use="complete.obs") # leads to error for if no values exist in interval.
text(mx, my+y_offset*1.2, sprintf("Pearson %.2f",correl))
print(sprintf("Printed correlation af x,y = %.2f, %.2f",mx, my+y_offset*1.2))
return(correl)
}
else
return(NA) # return NA if no values exist in interval given
}
# automatic text position y-offset from linear fit1
ddG_mode_sep = 1.0
offest = 0.8 * ddG_mode_sep*fit1$coefficients["synth"] + fit1$coefficients["(Intercept)"]
rp_inliers = region_cor_plot(-10, 5, offest) # correlation excluding high ddG outliers
# scan_var output
print(" RESULT_LAB   dG_wt_fit dG_wt_true      B_D    B_max  cor_s  cor_all  cor_low  cor_p_stab  cor_p_neu  cor_p_dest cor_p_inliers cor_s_stab  cor_s_neu  cor_s_dest cor_s_inliers  slope    inter  frac_act RSS  scan")
print(sprintf(" RESULT_VAL %7.3f  %7.3f  %7.3f  %5.3f    %5.3f    %5.3f     %5.3f    %5.3f  %5.3f    %5.3f   %5.3f  %5.3f    %5.3f     %5.3f  %7.3f %7.3f  %7.3f ",
cp$dG_wt, dG_wt, cp$B_D, cp$B_max,
rs_all, rp_all,
rp, rp_stab, rp_neu, rp_destab,rp_inliers,
rs_stab, rs_neu, rs_destab, rs_inliers,
fit1$coefficients["synth"], fit1$coefficients["(Intercept)"], frac_act,
global_fit$deviance,
extra$scan_var
))
# scan_var output
print(" RESULT_LAB   dG_wt_fit dG_wt_true      B_D    B_max  cor_s  cor_all  cor_low  cor_p_stab  cor_p_neu  cor_p_dest cor_p_inliers cor_s_stab  cor_s_neu  cor_s_dest cor_s_inliers  slope    inter  frac_act RSS  scan")
print(sprintf(" RESULT_VAL %7.3f  %7.3f  %7.3f  %5.3f    %5.3f    %5.3f     %5.3f    %5.3f  %5.3f    %5.3f   %5.3f  %5.3f    %5.3f     %5.3f  %7.3f %7.3f  %7.3f %7.3f  %7.3f  ",
cp$dG_wt, dG_wt, cp$B_D, cp$B_max,
rs_all, rp_all,
rp, rp_stab, rp_neu, rp_destab,rp_inliers,
rs_stab, rs_neu, rs_destab, rs_inliers,
fit1$coefficients["synth"], fit1$coefficients["(Intercept)"], frac_act,
global_fit$deviance,
extra$scan_var
))
print(sprintf(" RESULT_VAL %7.3f  %7.3f  %7.3f  %5.3f    %5.3f    %5.3f     %5.3f    %5.3f  %5.3f    %5.3f   %5.3f  %5.3f    %5.3f     %5.3f  %7.3f %7.3f  %7.3f %7.3f  %7.3f %7.3f ",
cp$dG_wt, dG_wt, cp$B_D, cp$B_max,
rs_all, rp_all,
rp, rp_stab, rp_neu, rp_destab,rp_inliers,
rs_stab, rs_neu, rs_destab, rs_inliers,
fit1$coefficients["synth"], fit1$coefficients["(Intercept)"], frac_act,
global_fit$deviance,
extra$scan_var
))
source("~/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar/eval_synth.r", echo=TRUE)
source("~/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar/eval_synth.r", echo=TRUE)
source("~/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar/eval_synth.r", echo=TRUE)
#####
rs_neu_stab = region_cor_plot_s(-10, 0.5, offest) # neutral and stab by synth ddG spearman correlation
source("~/mega/binf/thesis/gmma/synth/synth_experiments/IFS_4substvar/eval_synth.r", echo=TRUE)
warnings()
rp_neu_stab = region_cor_plot(-10, 0.5, offest) # neutral and stab by synth ddG
# quartz.save(sprintf("eval_synth/eval_synth%f.png", extra$scan_var), type="png")
dev.off()
# save values but do not print in eval_synth plot
rp_stab = region_cor_plot(-10, -0.5, offest)
rp_neu = region_cor_plot(-0.5, 0.5, -offest)
rp_destab = region_cor_plot(0.5, 10, -offest)
rs_stab = region_cor_plot_s(-10, -0.5, offest)
rs_neu = region_cor_plot_s(-0.5, 0.5, -offest)
rs_destab = region_cor_plot_s(0.5, 10, -offest)
#####
rs_neu_stab = region_cor_plot_s(-10, 0.5, offest) # neutral and stab by synth ddG spearman correlation
options(width=300, digits=4, stringsAsFactors=F)
load("gmma_result.rda")
load("make_synthetic.rda")
gmma = read.table("prism_gmma_000_GFP_synthetic.txt", header=T)
synth = read.table("gmma_synthetic_true.txt", header=T)
common_subst = intersect(gmma$variant, synth$variant)
print(sprintf("GMMA has %d subst., synth. data %d subst. with %d subst. in common",length(gmma$variant), length(synth$variant), length(common_subst)))
stopifnot(length(gmma$variant) == length(synth$variant))
# rownames(synth) = synth$variant
gmma$synth = synth[match(gmma$variant,synth$variant),"ddG"]
rs_all = cor(gmma[,"ddG"], gmma[,"synth"], method="spearman", use="complete.obs")
rp_all = cor(gmma[,"ddG"], gmma[,"synth"], method="pearson", use="complete.obs")
std_all = sd(gmma[,"ddG"] - gmma[,"synth"], na.rm=T)/sqrt(2)
mae_all = mean(abs(gmma[,"ddG"] - gmma[,"synth"]), na.rm=T)
std_mean_cut = 1.0
i = which(gmma$std_mean < std_mean_cut)
ni = setdiff(seq(nrow(gmma)), i)
rs = cor(gmma[i,"ddG"], gmma[i,"synth"], method="spearman")
rp = cor(gmma[i,"ddG"], gmma[i,"synth"], method="pearson")
std = sd(gmma[i,"ddG"] - gmma[i,"synth"])/sqrt(2)
mae = mean(abs(gmma[i,"ddG"] - gmma[i,"synth"]))
# The first may be sensitive to high-ddG outliers which are not always expected to be well determined
fit1 = lm(ddG ~ synth, data=gmma)
# save plot for every scan var value run, collect in separate directory
if(!(dir.exists("eval_synth"))){
dir.create("eval_synth")
}
# quartz(width=7, height=7.5)
png(sprintf("eval_synth/eval_synth_%f.png", extra$scan_var), width = 7, height = 7.5, units = "in", res = 100)
# png("eval_synth.png", width = 7, height = 7.5, units = "in", res = 100)
s = sprintf("dG_wt = %.2f (true %.2f)", cp$dG_wt, dG_wt)
plot(gmma[,"synth"], gmma[,"ddG"], ylim=c(min(gmma[,"ddG"], na.rm=T)-1.0, max(gmma[,"ddG"], na.rm=T)+1.0), main=s, xlab="True ddG", ylab="Estimated ddG")
i = which(gmma[,"std"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std"], y1=gmma[i,"ddG"]+gmma[i,"std"], length=0.01, angle=90, code=3, lwd=2)
i = which(gmma[,"std_mean"] >0.001)
arrows(x0=gmma[i,"synth"], y0=gmma[i,"ddG"]-gmma[i,"std_mean"], y1=gmma[i,"ddG"]+gmma[i,"std_mean"], length=0.02, angle=90, code=3, lwd=2)
print("ost \n ")
plot.window()
plot.window(xlim = 1, ylim = 1)
plot.window(xlim = c(1,2), ylim = c(1,2))
# save values but do not print in eval_synth plot
rp_stab = region_cor_plot(-10, -0.5, offest)
seq(0,57,1)
seq(0,98,0.2)
seq(0,98,2)
rep(seq(0.95,5) each = 5)
}
getwd()
setwd("/Users/Holm/mega/binf/thesis/gmma/synth/synth_experiments/gmma/Noise_FNR_4substvar")
# global correlations
plot(d$scan, d$cor_all)
d <- read.table("scan_dat_pruned.txt", header = TRUE)
# global correlations
plot(d$scan, d$cor_all)
plot(d$scan, d$cor_s)
d
d$cor_all
# global correlations
plot(d$scan, d$cor_all)
plot(d$scan, d$cor_s)
plot(cars)
source("~/mega/binf/thesis/gmma/synth/synth_experiments/gmma/Noise_FNR_4substvar/plot_synth.r", echo=TRUE)
# global correlations
plot(d$scan, d$cor_all)
plot(cars)
getwd()
plot(cars)
d <- read.table("scan_dat_pruned.txt", header = TRUE)
# global correlations
plot(d$scan, d$cor_all)
# global correlations
plot(d$scan, d$cor_all, xlab = "dlæs")
# global correlations
plot(d$scan, d$cor_all, xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation fitted/true ddGs")
# make nice plots
par(mfrow(2,2))
# make nice plots
par(mfrow = c(2,2))
# correlations
# global correlations
plot(d$scan, d$cor_all,
xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation of ddGs values global")
plot(d$scan, d$cor_s,
xlab = "False negative rate (%)", ylab = "Spearman correlation", main = "Speaman correlation of ddGs values global")
# correlations of interest: true stabilising and neutral subst correlations (ddG true [-10;0.5])
plot(d$scan, d$cor_p_neustab,
xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation of ddGs values for stabilising and neutral substitutions")
plot(d$scan, d$cor_s_neustab,
xlab = "False negative rate (%)", ylab = "Spearman correlation", main = "Spearman correlation of ddGs values for stabilising and neutral substitutions")
# model goodness of fit (as residual sum of squares)
plot(d$scan, d$RSS
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# model goodness of fit (as residual sum of squares)
line(d$scan, d$RSS
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# model goodness of fit (as residual sum of squares)
line(d$scan, d$RSS
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# model goodness of fit (as residual sum of squares)
line(d$scan, d$RSS, type = "l",
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# model goodness of fit (as residual sum of squares)
line(d$scan, d$RSS, type = "l"
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# model goodness of fit (as residual sum of squares)
plot(d$scan, d$RSS, type = "l"
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
# correlations
# global correlations
plot(d$scan, d$cor_all,
xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation of ddGs values global")
# make nice plots
par(mfrow = c(2,2))
# correlations
# global correlations
plot(d$scan, d$cor_all,
xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation of ddGs values global")
# correlations
# global correlations
plot(d$scan, d$cor_all, type = "l",
xlab = "False negative rate (%)", ylab = "Pearson correlation", main = "Pearson correlation of ddGs values global")
plot(d$scan, d$cor_s, type = "l",
xlab = "False negative rate (%)", ylab = "Spearman correlation", main = "Speaman correlation of ddGs values global")
sprintf("kdkdl %s", "fsdfds")
sprintf("kdkdl_%s", "fsdfds")
getwd()
sprintf("kdkdl_%s", getwd())
strsplit(getwd(), "/")
tail(strsplit(getwd(), "/"))
strsplit(getwd(), "/")[[1]]
rev(strsplit(getwd(), "/")[[1]])
rev(strsplit(getwd(), "/")[[1]])[1]
png(sprintf("correlations_summary.png_%s", rev(strsplit(getwd(), "/")[[1]])[1]), width = 4, height = 4)
par(mfrow = c(2,2))
# correlations
# global correlations
plot(d$scan, d$cor_all, type = "l",
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs global")
plot(d$scan, d$cor_s, type = "l",
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs global")
# correlations of interest: true stabilising and neutral subst correlations (ddG true [-10;0.5])
plot(d$scan, d$cor_p_neustab,
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs stabilising and neutral substitutions")
plot(d$scan, d$cor_s_neustab,
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs stabilising and neutral substitutions")
dev.off()
# make nice plots of interestning correlations
{
png(sprintf("correlations_summary_%s.png", rev(strsplit(getwd(), "/")[[1]])[1]), width = 4, height = 4)
par(mfrow = c(2,2))
# correlations
# global correlations
plot(d$scan, d$cor_all, type = "l",
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs global")
plot(d$scan, d$cor_s, type = "l",
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs global")
# correlations of interest: true stabilising and neutral subst correlations (ddG true [-10;0.5])
plot(d$scan, d$cor_p_neustab,
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs stabilising and neutral substitutions")
plot(d$scan, d$cor_s_neustab,
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs stabilising and neutral substitutions")
# mtext("synth scan summary",side = 3,
#       line = - 2,
#       outer = TRUE)
dev.off()
}
source("~/mega/binf/thesis/gmma/synth/synth_experiments/gmma/Noise_FNR_4substvar/plot_synth.r", echo=TRUE)
source("~/mega/binf/thesis/gmma/synth/synth_experiments/gmma/Noise_FNR_4substvar/plot_synth.r", echo=TRUE)
# make nice plots of interestning correlations
{
png(sprintf("correlations_summary_%s.png", rev(strsplit(getwd(), "/")[[1]])[1]))
par(mfrow = c(2,2))
# correlations
# global correlations
plot(d$scan, d$cor_all, type = "l",
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs global")
plot(d$scan, d$cor_s, type = "l",
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs global")
# correlations of interest: true stabilising and neutral subst correlations (ddG true [-10;0.5])
plot(d$scan, d$cor_p_neustab,
xlab = "Noise (% False negative rate)", ylab = "r", main = "r, ddGs stabilising and neutral substitutions")
plot(d$scan, d$cor_s_neustab,
xlab = "Noise (% False negative rate)", ylab = "ρ", main = "ρ, ddGs stabilising and neutral substitutions")
# mtext("synth scan summary",side = 3,
#       line = - 2,
#       outer = TRUE)
dev.off()
}
source("~/mega/binf/thesis/gmma/synth/synth_experiments/gmma/Noise_FNR_4substvar/plot_synth.r", echo=TRUE)
png(sprintf("GOF_%s.png", rev(strsplit(getwd(), "/")[[1]])[1]))
# model goodness of fit (as residual sum of squares)
plot(d$scan, d$RSS, type = "l"
,xlab = "False negative rate (%)", ylab = "Residual sum of squares", main = "Model goodness of fit")
dev.off()
