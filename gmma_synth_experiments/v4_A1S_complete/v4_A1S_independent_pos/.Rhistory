# loop over mutatitions in each variant
for(n_mut in seq(1, length(data_filtered$mut[index][[1]]))){
# position of mut
position <- parse_number(data_filtered$mut[index][[1]][n_mut])
# variant letter
letter_var <- substr(data_filtered$mut[index][[1]][n_mut], nchar(data_filtered$mut[index][[1]][n_mut]), nchar(data_filtered$mut[index][[1]][n_mut]))
# add one to count for observed mutatuon
pos_var_count_mat[letter_var, position] <- pos_var_count_mat[letter_var, position] + 1
# add birghtness measurement for mutation to sum brightness mat
pos_var_meanBright_mat[letter_var, position] <- pos_var_meanBright_mat[letter_var, position] +  data_filtered$medianBrightness[index]
}
}
}
# mean brightness per mutation: elementwise divide sum of brightness measurement by count matrix
pos_var_meanBright_mat <- pos_var_meanBright_mat / pos_var_count_mat
pos_var_meanBright_mat
# subset data allow only sequences with exactly one mutation
single_mut_variants <- data_filtered %>%
filter(nchar(mut) < 6) %>%  # not more than 1 mut for varaint
filter(nchar(mut) > 0) # exclude variants without any mutations
# look up corresponding mean brightness over multiply mutated sequences containing same mut as single mut sequence
var_aa_singles <- substr(single_mut_variants$mut, nchar(single_mut_variants$mut), nchar(single_mut_variants$mut))
pos_singles <- parse_number(unlist(single_mut_variants$mut))
single_mut_variants$multibright <- pos_var_meanBright_mat[cbind(var_aa_singles, pos_singles)]
# make scatter plot
task2_scatter <-
single_mut_variants %>%
ggplot(aes(x = multibright, y = medianBrightness))+
geom_point(shape = 1, size = 1)+
geom_errorbar(aes(ymin = medianBrightness - stdErr, ymax = medianBrightness + stdErr), color = "red", size = 0.2)+
theme_bw()
task2_scatter
task2_scatter
# wt and variant amino acids for single mutants
single_mut_variants$aa1 <- substr(single_mut_variants$mut, 1, 1)
single_mut_variants$aa2 <- var_aa_singles
# extract mutations from and to M and H
from_M <- single_mut_variants %>%
filter(aa1 == "M")
from_H <- single_mut_variants %>%
filter(aa1 == "H")
to_M <- single_mut_variants %>%
filter(aa2 == "M")
to_H <- single_mut_variants %>%
filter(aa2 == "H")
# prepare data for plotting
from_M$label <- "from_M"
from_H$label <- "from_H"
to_M$label <- "to_M"
to_H$label <- "to_H"
plot_single_mut_variants <- rbind(from_H, from_M, to_H, to_M)
# plot
first_last_dist_plot <-
plot_single_mut_variants %>%
ggplot(aes(x = medianBrightness, color = label))+
geom_density()+
theme_bw()
# summarize mutations in 20x20 submat
# init substituion mat
{
aa_sub <- data.frame(matrix(0, nrow = 20, ncol = 20))
rownames(aa_sub) <- colnames.by.AA
colnames(aa_sub) <- colnames.by.AA
aa_sub
# init mean_brightness mat
brightness_mat <- aa_sub
}
# fill out submat
for(index in seq(1, nrow(data_filtered))){
# ensure mutations exist for given seq
if(length(data_filtered$mut[index][[1]] > 0)){
# loop over mutatitions in each variant
for(n_mut in seq(1, length(data_filtered$mut[index][[1]]))){
# wt letter
letter_wt <- substr(data_filtered$mut[index][[1]][n_mut], 1, 1)
# variant letter
letter_var <- substr(data_filtered$mut[index][[1]][n_mut], nchar(data_filtered$mut[index][[1]][n_mut]), nchar(data_filtered$mut[index][[1]][n_mut]))
# add one to count for observed mutatuon
aa_sub[letter_wt, letter_var] <- aa_sub[letter_wt, letter_var] + 1
# add birghtness measurement for mutation to sum brightness mat
brightness_mat[letter_wt, letter_var] <- brightness_mat[letter_wt, letter_var] +  data_filtered$medianBrightness[index]
}
}
}
# mean brightness: elementwise divide sum of brightness measurement by count matrix
mean_brightness_mat <- brightness_mat / aa_sub
mean_brightness_mat <- as.matrix(mean_brightness_mat) # convert to mat for plotting
# plot matrix as heatmap
plot_mat <- melt(mean_brightness_mat)
colnames(plot_mat) <- c("aa_wt", "aa_var", "mean_brightness")
sub_mat_heatmap <-
ggplot(plot_mat, aes(x = aa_wt, y = aa_var, fill = mean_brightness)) +
geom_tile(na.rm = TRUE)+
theme_bw()
# Task 4.1
# load in the native DNA from exercise 1
native_DNA_ex1 <-
readDNAStringSet('native_DNA.fa')
# compare it to the nativeDNA included above (e.g. by pairwise sequence alignment),
align_DNA <- pairwiseAlignment(native_DNA_ex1, DNAString(nativeDNA), type = "local") # pairwise alignment local
# then translate both sequences to protein and compare those.
ex1_pp <- translate(native_DNA_ex1)
wt_pp <- translate(DNAString(nativeDNA))
align_pp <- pairwiseAlignment(ex1_pp, wt_pp, type = "local") # pairwise alignment local
observed_variants_Sakisyan <- unique(unlist(data_filtered$mut)) # unique mutations in Sakisyan data
# variants common to dimbright and Sakisyan dataset
common_vars <- intersect(observed_variants_dimbright, observed_variants_Sakisyan)
number_mutations_common <- length(common_vars) # number of mutations in common
only_Sakisyan <- setdiff(observed_variants_Sakisyan, observed_variants_dimbright) # mutations in Sakisyan data, not in dimbright
number_only_Sakisyan <- length(only_Sakisyan) # number of variants only observed in Sakisyan data set
number_only_Sakisyan
only_dimbright <- setdiff(observed_variants_dimbright, observed_variants_Sakisyan) # mutations in dimbright data, not in Sakisyan data
number_only_dimbright <-length(only_dimbright) # number of variants only observed in dimbright data set
number_only_dimbright
#  - only observed in the dataset we worked with in class?
number_only_dimbright
# position, aa2 of variants in common
var_aa_common <- substr(common_vars, nchar(common_vars), nchar(common_vars))
pos_common <- parse_number(common_vars)
# medianBrightness (Sakisyan data set) of variants in common
meanBright_common <- pos_var_meanBright_mat[cbind(var_aa_common, pos_common)]
n_aa <- nchar(ex1_pp) # length of prot seq
{
pos_var_bright_mat <- data.frame(matrix(0, nrow = 20, ncol = n_aa))
rownames(pos_var_bright_mat) <- colnames.by.AA
colnames(pos_var_bright_mat) <- seq(1,n_aa, 1)
}
# fill out mat, loop over all bserved sequences
for(index in seq(1, nrow(bright))){
# ensure mutations exist for given seq
if(length(bright$mut[index][[1]] > 0)){
# loop over mutatitions in each variant
for(n_mut in seq(1, length(bright$mut[index][[1]]))){
# position of mut
position <- parse_number(bright$mut[index][[1]][n_mut])
# variant letter
letter_var <- substr(bright$mut[index][[1]][n_mut], nchar(bright$mut[index][[1]][n_mut]), nchar(bright$mut[index][[1]][n_mut]))
# add count of variant to matrix
pos_var_bright_mat[letter_var, position] <- pos_var_bright_mat[letter_var, position] +  1
}
}
}
# bright frequencies
pos_var_bright_mat_freq <- pos_var_bright_mat/sum(pos_var_bright_mat)
n_aa <- nchar(ex1_pp) # length of prot seq
{
pos_var_dim_mat <- data.frame(matrix(0, nrow = 20, ncol = n_aa))
rownames(pos_var_dim_mat) <- colnames.by.AA
colnames(pos_var_dim_mat) <- seq(1,n_aa, 1)
}
# fill out mat, loop over all bserved sequences
for(index in seq(1, nrow(dim))){
# ensure mutations exist for given seq
if(length(dim$mut[index][[1]] > 0)){
# loop over mutatitions in each variant
for(n_mut in seq(1, length(dim$mut[index][[1]]))){
# position of mut
position <- parse_number(dim$mut[index][[1]][n_mut])
# variant letter
letter_var <- substr(dim$mut[index][[1]][n_mut], nchar(dim$mut[index][[1]][n_mut]), nchar(dim$mut[index][[1]][n_mut]))
# add count of variant to matrix
pos_var_dim_mat[letter_var, position] <- pos_var_dim_mat[letter_var, position] +  1
}
}
}
# dim frequencies
pos_var_dim_mat_freq <- pos_var_dim_mat/sum(pos_var_dim_mat)
# add pseudocount of 1/sum vars to dim mat
pos_var_dim_mat_freq + (1/sum(pos_var_dim_mat))
# log(dim/bright) mat
logodds_dimbright <- log10(pos_var_bright_mat_freq/pos_var_dim_mat_freq)
# dimbright ratio of variants in common
dimbright_common <- logodds_dimbright[cbind(var_aa_common, pos_common)]
# scatterplot dimbright ratio against meanBrightness
scatter_data <- cbind(dimbright_common, meanBright_common)
task4_scatter <- data_frame(scatter_data) %>%
ggplot(aes(x = dimbright_common, y = meanBright_common))+
geom_point()+
theme_bw()
task4_scatter
# How many unique barcodes (=DNA variant sequences) are found?
n_unique_barcodes
```{r}
# How many unique protein sequences after cleanup?
n_unique_proteins
# What is the most common protein sequence that is not wild-type? Keep in mind that a protein sequence can be encoded by several different barcodes. Include your answers in your hand-in.
most_common_pp_not_wt
task2_scatter
first_last_dist_plot
sub_mat_heatmap
# Write a short paragraph describing what you observe.
align_DNA
align_pp
#  - observed in both datasets?
number_mutations_common
#  - only observed in the Sarkisyan dataset?
number_only_Sakisyan
#  - only observed in the dataset we worked with in class?
number_only_dimbright
# Submit the scatter plot and discussion as part of your hand-in.
task4_scatter
# make scatter plot
task2_scatter <-
single_mut_variants %>%
ggplot(aes(x = multibright, y = medianBrightness))+
geom_point(shape = 1, size = 1)+
geom_errorbar(aes(ymin = medianBrightness - stdErr, ymax = medianBrightness + stdErr), color = "red", size = 0.2)+
xlab("mean brightness including multi variants")+
ylab("brightness single variants")
task2_scatter
# make scatter plot
task2_scatter <-
single_mut_variants %>%
ggplot(aes(x = multibright, y = medianBrightness))+
geom_point(shape = 1, size = 1)+
geom_errorbar(aes(ymin = medianBrightness - stdErr, ymax = medianBrightness + stdErr), color = "red", size = 0.2)+
xlab("mean brightness including multi variants")+
ylab("brightness single variants")+
theme_bw()
task2_scatter
task4_scatter <- data_frame(scatter_data) %>%
ggplot(aes(x = dimbright_common, y = meanBright_common))+
geom_point()+
xlab("dim,bright score")+
ylab("Sarkisyan brightness")+
theme_bw()
task4_scatter
# Submit the scatter plot and discussion as part of your hand-in.
task4_scatter
task2_scatter
# Submit the scatter plot and discussion as part of your hand-in.
task4_scatter
pbinom(20, 0.33)
pbinom(0, 20, 0.33)
getwd()
setwd("/Users/Holm/mega/binf/thesis/gmma/synth/synth_experiments/gmma/current/A1S_0stab_4substvar")
d <- read.table("scan_dat_pruned.txt", header = TRUE)
d <- read.table("scan_dat_pruned.txt", header = TRUE)
View(d)
rownames(d)
colnames(d)
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
apply(colnames(d), FUN = function(par){plot(d$scan, d$par )})
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
plot_summary_all(d)
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
sapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
dev.off()
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
vapply(colnames(d), function(par){print(par)})
vapply(colnames(d), function(param){print(param)})
vapply(colnames(d), function(param){print(param)})
apply(colnames(d), function(param){print(param)})
apply(colnames(d), FUN = function(param){print(param)})
colnames(d)
for(i in colnames(d)){
print(i)
}
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in colnames(d)){
plot(d$scan, d$i)
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
dev.off()
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in colnames(d)){
plot(d$scan, d$i)
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in colnames(d)){
print(d$i)
plot(d$scan, d$i)
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
for(i in colnames(d)){
print(d$i)
# plot(d$scan, d$i)
}
for(i in colnames(d)){
print(i)
# plot(d$scan, d$i)
}
for(i in colnames(d)){
print(d$i)
# plot(d$scan, d$i)
}
for(i in colnames(d)){
print(d$unlist(i))
# plot(d$scan, d$i)
}
for(i in colnames(d)){
print(i)
# plot(d$scan, d$i)
}
d$colnames(d)
d$colnames(d)[1]
d$(colnames(d)[1])
colnames(d)
colnames(d)[1]
unlist(colnames(d)[1])
colnames(d)[[1]]
colnames(d)[[1]][1]
colnames(d)[[1]][1]
colnames(d)[1][1]
d
colnames(d)[1]
d[colnames(d)[1],]
d[,colnames(d)[1]]
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in colnames(d)){
# print(d$i)
plot(d$scan, d[,colnames(d)[1]])
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
plot_summary_all(d)
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
dev.off()
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in colnames(d)){
# print(d$i)
plot(d$scan, d[,colnames(d)[i]])
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
#     # follow ddGs value of specific subst
#     plot(d$scan, d$rank_ddGs_fit_stab)
#     plot(d$scan, d$ddGs_fit_stab)
#
#
#     mtext("synth scan summary",side = 3,
#           line = - 2,
#           outer = TRUE)
#   }
# }
plot_summary_all <- function(d){
{
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in length(colnames(d))){
# print(d$i)
plot(d$scan, d[,colnames(d)[i]])
}
mtext("synth scan summary",side = 3,
line = - 2,
outer = TRUE)
}
}
png("scan_summary.png", width = 10, height = 14, units = "in", res = 200)
plot_summary_all(d)
dev.off()
length(colnames(d))
par(mfrow = c(5,6))
# vapply(colnames(d), FUN = function(par){plot(d$scan, d$par)})
for(i in length(colnames(d))){
# print(d$i)
plot(d$scan, d[,colnames(d)[i]])
}
plot(d$scan, d[,colnames(d)[1]]
plot(d$scan, d[,colnames(d)[1]])
plot(d$scan, d[,colnames(d)[1]])
plot(cars)
plot(cars)
