# h =	...do something clever...
h[h<1e-12] = h[h<1e-12] + 1e-12
ih = tryCatch(chol2inv(chol(h)), error = function(e) {print("Cannot calculate inverse of tinkered hessian"); print(e); NA})
}
rev(rep(seq(-5,5,0.5), each = 3))
getwd()
setwd("/Users/Holm/mega/binf/thesis/figures/synth/synth_real_ddg_dists")
load("gmma_fit_global.rda")
load("gmma_fit_global_real_laub.rda")
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
subst$ddG_glob
View(subst)
source("~/.active-rstudio-document", echo=TRUE)
View(subst_mut_indices)
View(subst)
View(subst)
View(residue)
View(res_mut_indices)
View(mut_subst_indices)
View(mut_list)
View(subst)
View(global_fit)
options(width=300, digits=4, stringsAsFactors=F)
pcol=c(seq(6),9,10,11,12,17,19,20,21,27,28,29)
args = commandArgs(trailingOnly=TRUE)
if (interactive()) {
file = "gmma_fit_global_real_laub.rda"
# file = "gmma_fit_global_assigned.rda"
} else if (length(args) < 1) {
print("")
print("usage: Rscript gmma06_analysis.r <gmma_fit_global.rda>")
quit(save="no")
} else {
file = args[1]
}
print(sprintf("Read %s",file))
load(file)
# Wild-type stability
cp$dG_wt_init = cp$dG_wt
if ('dG_wt' %in% names(global_fit$par)) cp$dG_wt = global_fit$par['dG_wt']
# Maximum fluorescence base line
cp$B_max_init = cp$B_max
if ('B_max' %in% names(global_fit$par)) cp$B_max = global_fit$par['B_max']
# Minimum fluorescence base line
cp$B_D_init = cp$B_D
if ('B_D' %in% names(global_fit$par)) cp$B_D = global_fit$par['B_D']
print(sprintf("Base line initial fit: dG_wt %6.2f, B_max %6.2f, B_D %6.2f",cp$dG_wt_init,cp$B_max_init,cp$B_D_init))
print(sprintf("Base line global fit : dG_wt %6.2f, B_max %6.2f, B_D %6.2f",cp$dG_wt,cp$B_max,cp$B_D))
nmut = length(mutant[,1])
nsubst = length(subst[,1])
nres = length(residue[,1])
print("=== GMMA Settings ===")
print(settings)
################################################################################
# Global fitted ddG in subst and mutant
################################################################################
print(sprintf("Global fit result (%d): %s",global_fit$info,global_fit$message))
global_dof = length(global_fit$fvec)-length(global_fit$par)
print(sprintf("Estimated %d parameters from %d data points (%d degrees of freedom)",length(global_fit$par),length(global_fit$fvec),global_dof))
print(sprintf("Sum-of-squares %.2f in %d iterations",global_fit$deviance,global_fit$niter))
# chi_sq_red = 1/(length(global_fit$fvec)-length(global_fit$par)) * global_fit$deviance/wt$sd^2
chi_sq = global_fit$deviance/wt$sd^2
print(sprintf("Chi-squared: %.3f (using WT uncertainty %.2f)",chi_sq,wt$sd))
chi_sq_red = chi_sq/global_dof
print(sprintf("Reduced chi-squared: %.3f",chi_sq_red))
subst$ddG_glob = NA
mutant$dG_glob = NA
mutant$residual = NA
si = which(subst$gmma == "use")
subst[si,'ddG_glob'] = global_fit$par[rownames(subst[si,])]
mi = which(mutant$gmma == "use")
mutant[mi,'dG_glob'] = sapply(mut_subst_indices[mi], function(l) {sum(subst[l,'ddG_glob'], na.rm=F)}) + cp$dG_wt
res = global_fit$fvec
names(res) = names(mut_ddG_indices)
mutant[mi,'residual'] = res[rownames(mutant[mi,])]
wt$residual = res["WT"]
# I may change this!
B_pred_init = function(dG) { e = exp(dG/settings$RT); (cp$B_max_init + cp$B_D_init*e) /(1.0+e) }
B_pred_glob = function(dG) { e = exp(dG/settings$RT); (cp$B_max + cp$B_D*e) /(1.0+e) }
View(subst)
View(subst)
# Histogram of ddG_glob
quartz(height=5, width=6)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
xaxis()
quartz.save("ddG_hist.png",type="png")
# Trimodal synthetic substitution effects, aka s75
subst_param$wt = laub_wt
laub_wt <- "AVST"
# Trimodal synthetic substitution effects, aka s75
subst_param$wt = laub_wt
laub_wt <- "AVST"
subst_param = list()
# Trimodal synthetic substitution effects, aka s75
subst_param$wt = laub_wt
subst_param$n_stab = 0
subst_param$n_neu = 19
subst_param$n_destab = 57
subst_param$n_ifs = 0
subst_list = sample(all_single(laub_wt), subst_param$n_stab+subst_param$n_neu+subst_param$n_destab+subst_param$n_ifs, replace=FALSE)
# Generate all single mutants from a amino acid sequence string
all_single = function(aa_seq) {
nres = nchar(aa_seq)
resi = rep(seq(nres), each=20)
resn = rep(strsplit(aa_seq,"")[[1]], each=20)
rest = rep(strsplit(aa_one,"")[[1]], nres)
mask = resn != rest
return( paste0(resn[mask], resi[mask], rest[mask]) )
}
laub_wt <- "AVST"
subst_param = list()
# Trimodal synthetic substitution effects, aka s75
subst_param$wt = laub_wt
subst_param$n_stab = 0
subst_param$n_neu = 19
subst_param$n_destab = 57
subst_param$n_ifs = 0
subst_list = sample(all_single(laub_wt), subst_param$n_stab+subst_param$n_neu+subst_param$n_destab+subst_param$n_ifs, replace=FALSE)
aa_one = "ACDEFGHIKLMNPQRSTVWY"
# # Get reference GMMA results
# ref_gmma_file="../gmma_result.rda"
# print(sprintf("Loading %s",ref_gmma_file))
# load(ref_gmma_file)
# Generate all single mutants from a amino acid sequence string
all_single = function(aa_seq) {
nres = nchar(aa_seq)
resi = rep(seq(nres), each=20)
resn = rep(strsplit(aa_seq,"")[[1]], each=20)
rest = rep(strsplit(aa_one,"")[[1]], nres)
mask = resn != rest
return( paste0(resn[mask], resi[mask], rest[mask]) )
}
generate_n_mut = function(n, n_mut, pos_l, oversample=5) {
# This is uniform in positions but uniform in substitutions if a position occurs the same number of times in pos_l
#   as there are different substitutions at that position
df = data.frame(mut_01 = sample(pos_l, oversample*n, replace=T))
# Make n_mut columns of positions
for (nm in seq(2,n_mut)) {
df[,sprintf("mut_%02d",nm)] = sample(pos_l, oversample*n, replace=T)
}
# Only keep rows with substitutions at different positions
unq_pos = apply(df, MARGIN=1, function(v) {length(unique(v))} )
df = df[which(unq_pos==n_mut),]
if (nrow(df) >= n) {
return(df[1:n,])
} else {
return(NA)
}
}
build_random_lib = function(lib_compo, subst_list) {
# lib_compo should have two columns that gives the number of variants "nvar" with a given number of substitutions "nmut"
stopifnot("nmut" %in% colnames(lib_compo) & "nvar" %in% colnames(lib_compo))
# each nmut sould only be given once
stopifnot(length(unique(lib_compo$nmut)) == length(lib_compo$nmut))
# substitutions should all be unique
stopifnot(length(unique(subst_list)) == length(subst_list))
# list of positions for substitutions
pos_l = as.integer(substr(subst_list, 2, nchar(subst_list)-1))
nres = max(pos_l)
print(sprintf("Protein of %d residues with %d og %d possible single substitutions given", nres, length(subst_list), nres*19))
# subst_list indices to lookup substitutions at a given position
resi_index = lapply(seq(nres), function(i) {which(pos_l == i)} )
# double mut calculation based on resi_index
pos_subst_n = sapply(resi_index, length)
m = outer(pos_subst_n, pos_subst_n)
n_double = sum(m[upper.tri(m,diag=F)])
print(sprintf("Substitution list can make %d of %d possible double mutants", n_double, (nres^2-nres)/2*19^2))
var_list = c()
if (1 %in% lib_compo$nmut) {
i = which(lib_compo$nmut == 1)
stopifnot(lib_compo[i,"nvar"] <= length(subst_list))
var_list = sample(subst_list, lib_compo[i,"nvar"], replace=F)
print(sprintf("Added %d of %d single mutants", lib_compo[i,"nvar"], length(subst_list)))
# remove row with single mutants
lib_compo = lib_compo[-i,]
}
for (mi in seq(nrow(lib_compo))) {
n_mut = lib_compo[mi,"nmut"]
n_var = lib_compo[mi,"nvar"]
print(paste(n_mut, n_var))
# data frame containing position to substitute in each variant
var_df = generate_n_mut(n_var, n_mut, pos_l)
# sort substitutions by position
col_names = colnames(var_df)
var_df = as.data.frame(t(apply(var_df, MARGIN=1, sort)))
colnames(var_df) = col_names
# order by first two substitutions beause I don't know how to order by all (these are always double or higher substituted variants)
var_df[order(var_df$mut_01, var_df$mut_02),]
# add random substitution index for each position
for (cn in colnames(var_df)) {
var_df[,paste0(cn,"_si")] = sapply(var_df[,cn], function(p) {sample(seq_along(resi_index[[p]]),1)})
}
# fill in substitutions at each position
f = function(l,n_mut) {
paste( sapply(seq(n_mut), function(i){subst_list[resi_index[[l[i]]][l[i+n_mut]]]}), collapse=":" )
}
var = apply(var_df, MARGIN=1, f, n_mut=n_mut)
var = unname(var)
var_list = c(var_list, var)
print(sprintf("Added %d %d-mutants, total variants %d", length(var), n_mut, length(var_list)))
}
return(var_list)
}
make_pairs = function(subst_list) {
# Make all pair combinations excluding combinations of substitutions at same position
pos_list = as.integer(substr(subst_list, 2, nchar(subst_list)-1))
nres = max(pos_list)
# subst_list indices to lookup substitutions at a given position
resi_index = lapply(seq(nres), function(i) {which(pos_list == i)} )
# lower triangle coordinates of position-pairs matrix
lower_indices = data.frame(i=rep(seq(2,nres),seq(1,nres-1)), j=sequence(1:(nres-1)))
# pairs of subst_list indices for all possible combinations of substitutions (not substitutions at same position)
pairs = unlist(apply(lower_indices, MARGIN=1, function(l) { c(outer(resi_index[[l[2]]], resi_index[[l[1]]], paste, sep=":")) }))
pairs_list = strsplit(pairs, ":")
pairs_df = data.frame(i=as.numeric(sapply(pairs_list, "[", 1)), j=as.numeric(sapply(pairs_list, "[", 2)))
return( paste(subst_list[pairs_df$i], subst_list[pairs_df$j], sep=":") )
}
# poor solution to make complete n subst var sets, but works: make all subst pairs, triples etc and concatenate (function "make_complete()")
# (will work for Laub data (only up to 4 subst/var), will not work for Hollfelder data ! (up to 6 subst per var, and different sets of subst for different positions!))
make_triples = function(subst_list){
# Make all pair combinations excluding combinations of substitutions at same position
pos_list = as.integer(substr(subst_list, 2, nchar(subst_list)-1))
nres = max(pos_list)
# subst_list indices to lookup substitutions at a given position
resi_index = lapply(seq(nres), function(i) {which(pos_list == i)} )
# modify below here for higher order subst var
# lower triangle coordinates of position-pairs matrix
lower_indices = t(data.frame(combn(unique(pos_list), 3))) # replace 2 with n
# pairs of subst_list indices for all possible combinations of substitutions (not substitutions at same position)
triples = unlist(apply(lower_indices, MARGIN=1, function(l) { apply((expand.grid(resi_index[[l[3]]], resi_index[[l[2]]], resi_index[[l[1]]])), 1, paste, collapse = ":")  }))
triples_list = strsplit(triples, ":")
triples_df = data.frame(i=as.numeric(sapply(triples_list, "[", 1)), j=as.numeric(sapply(triples_list, "[", 2)), k=as.numeric(sapply(triples_list, "[", 3)))
return(paste((paste(subst_list[triples_df$i], subst_list[triples_df$j], sep=":")), subst_list[triples_df$k], sep = ":")  )
}
make_quads = function(subst_list){
# Make all pair combinations excluding combinations of substitutions at same position
pos_list = as.integer(substr(subst_list, 2, nchar(subst_list)-1))
nres = max(pos_list)
# subst_list indices to lookup substitutions at a given position
resi_index = lapply(seq(nres), function(i) {which(pos_list == i)} )
# modify below here for higher order subst var
# lower triangle coordinates of position-pairs matrix
lower_indices = t(data.frame(combn(unique(pos_list), 4))) # replace 2 with n
# pairs of subst_list indices for all possible combinations of substitutions (not substitutions at same position)
quads = unlist(apply(lower_indices, MARGIN=1, function(l) { apply((expand.grid(resi_index[[l[4]]], resi_index[[l[3]]], resi_index[[l[2]]], resi_index[[l[1]]])), 1, paste, collapse = ":")  }))
quads_list = strsplit(quads, ":")
quads_df = data.frame(i=as.numeric(sapply(quads_list, "[", 1)), j=as.numeric(sapply(quads_list, "[", 2)), k=as.numeric(sapply(quads_list, "[", 3)), l=as.numeric(sapply(quads_list, "[", 4)))
return(paste(paste((paste(subst_list[quads_df$i], subst_list[quads_df$j], sep=":")), subst_list[quads_df$k], sep = ":"), subst_list[quads_df$l], sep = ":"))
}
make_complete <- function(subst_list, nmut){
vars <- c()
if (1 %in% nmut){
vars <- append(vars, subst_list)
}
if (2 %in% nmut){
vars <- append(vars, make_pairs(subst_list))
}
if (3 %in% nmut){
vars <- append(vars, make_triples(subst_list))
}
if (4 %in% nmut){
vars <- append(vars, make_quads(subst_list))
}
return(vars)
}
order_variants = function(variant_list) {
# function to order substitutions in a variant and filter out variants with substitutions at same position
order_var = function(v) {
vl = strsplit(v,":")[[1]]
p = as.numeric( substr(vl,2,nchar(vl)-1) )
if (length(p)==length(unique(p))) {
return(paste(vl[order(p,decreasing=F)], collapse=":"))
} else {
return("")
}
}
new_list = sapply(variant_list, order_var)
return(new_list[nchar(new_list) > 0])
# unname also ?
# could also order list here so single mut are first according to resi-taa, then double mut etc
}
# # Don't add terminal MS and K residues to keep Sarkisyan numbering
# gfp_ref="KGEELFTGVVPILVELDGDVNGHKFSVSGEGEGDATYGKLTLKFICTTGKLPVPWPTLVTTLSYGVQCFSRYPDHMKQHDFFKSAMPEGYVQERTIFFKDDGNYKTRAEVKFEGDTLVNRIELKGIDFKEDGNILGHKLEYNYNSHNVYIMADKQKNGIKVNFKIRHNIEDGSVQLADHYQQNTPIGDGPVLLPDNHYLSTQSALSKDPNEKRDHMVLLEFVTAAGITHGMDELY"
# pyr1_wt="MPSELTPEERSELKNSIAEFHTYQLDPGSCSSLHAQRIHAPPELVWSIVRRFDKPQTYKHFIKSCSVEQNFEMRVGCTRDVIVISGLPANTSTERLDILDDERRVTGFSIIGGEHRLTNYKSVTTVHRFEKENRIWTVVLESYVVDMPEGNSEDDTRMFADTVVKLNLQKLATVAEAMARNSGDGSGSQVT"
laub_wt <- "AVST"
#######################################################################################################################################
#######################################################################################################################################
##
##  SUBSTITUTION GENERATION
##
#######################################################################################################################################
#######################################################################################################################################
subst_param = list()
extra = list()
# mock scan_var to save individual run outptus plots
extra$scan_var = round(scan_var)
n = extra$scan_var
print(sprintf(" RESULT_SCAN : %d mock scan ", n))
# gfp_all_single = all_single(gfp_ref)
# List of substitutions
# subst_list = c("A1d", "A1e", "B2d", "B2e", "B2f", "C4c") # test list
# subst_list = gfp_all_single
# subst_list = sample(gfp_all_single, 1000, replace=F)
# # Sarkisyan substitutions
# subst_param$subst_mask = subst$gmma=="use"
# subst_list = rownames(subst[which(subst_param$subst_mask),])
# # Library with destabilizing pair-combinatorial backgrounds, aka s77
# stab_subst = rownames(subst_sig[1:50,])
# taa = substr(gfp_all_single,nchar(gfp_all_single),nchar(gfp_all_single))
# wtaa = substr(gfp_all_single,1,1)
# iI2V = which(wtaa=="I" & taa=="V")
# iV2A = which(wtaa=="V" & taa=="A")
# iV2A = iV2A[iV2A != which(gfp_all_single == "V161A")]
# destab_subst = gfp_all_single[c(iI2V,iV2A)]
# destab_subst = destab_subst[! destab_subst %in% stab_subst]
# subst_list = c(stab_subst, destab_subst)
# # store for later usage
# extra[["stab_subst"]] = stab_subst
# extra[["destab_subst"]] = destab_subst
# Trimodal synthetic substitution effects, aka s75
subst_param$wt = laub_wt
subst_param$n_stab = 0
subst_param$n_neu = 19
subst_param$n_destab = 57
subst_param$n_ifs = 0
subst_list = sample(all_single(laub_wt), subst_param$n_stab+subst_param$n_neu+subst_param$n_destab+subst_param$n_ifs, replace=FALSE)
print(sprintf("Generated %d substotutions of Laub with %d stabilizing, %d neutral and %d destabilizing, and %d IFS",
length(subst_list),subst_param$n_stab,subst_param$n_neu,subst_param$n_destab, subst_param$n_ifs))
#
# # scan trimodal distribution of n_stab,n_neu,n_destab
# extra$scan_var = round(scan_var)
# n = extra$scan_var
# print(sprintf(" RESULT_SCAN : %d IFSs", n))
#
#
# # Trimodal synthetic substitution effects, aka s75
# subst_param$wt = laub_wt
# subst_param$n_stab = 0
# subst_param$n_neu = 19
# subst_param$n_destab = 57 - n
# subst_param$n_ifs = n
# subst_list = sample(all_single(laub_wt), subst_param$n_stab+subst_param$n_neu+subst_param$n_destab+subst_param$n_ifs, replace=FALSE)
# print(sprintf("Generated %d substotutions of Laub with %d stabilizing, %d neutral and %d destabilizing, and %d IFS",
#               length(subst_list),subst_param$n_stab,subst_param$n_neu,subst_param$n_destab, subst_param$n_ifs))
# Sort substitutions according to position and new amino acid
stopifnot(length(subst_list) == length(unique(subst_list)))
subst_list = subst_list[order( as.numeric(substr(subst_list,2,nchar(subst_list)-1)), substr(subst_list,nchar(subst_list),nchar(subst_list)))]
save(subst_list, subst_param, extra, file="synth_subst.rda")
# load(paste0(ref_dir,"/synth_subst.rda"))
#############################################
# Generate or calculate substitution effects (ddG's)
#############################################
ddG_param = list()
ddG = rep(NA, length(subst_list))
names(ddG) = subst_list
# # Sarkisyan-like data
# ddG[] = subst[which(subst_param$subst_mask),"ddG_glob"]
# # replace uncertain ddG's with random values drawn from a normal approximation of GFP ddG's
# subst_uncert = rownames(subst[which(subst_param$subst_mask & is.na(subst$rank)),])
# ddG[subst_uncert] = rnorm(length(subst_uncert), mean=mean(subst_sig$ddG_glob), sd=sd(subst_sig$ddG_glob))
# # scan ddG sd
# extra$scan_var = as.numeric(scan_var)
# n = extra$scan_var
# print(sprintf(" RESULT_SCAN : ddG sd  : %f  ", n))
# Trimodal synthetic substitution effects, aka s75
ddG_param$mean_stab = -1.0
ddG_param$mean_neu = 0.0
ddG_param$mean_destab = 2.0
ddG_param$mean_ifs = 10.0
ddG_param$sd = 0.4
ddG_param$cat = sample(c(rep(1,subst_param$n_stab), rep(2,subst_param$n_neu), rep(3,subst_param$n_destab), rep(4,subst_param$n_ifs)))
ddG[which(ddG_param$cat==1)] = rnorm(subst_param$n_stab, ddG_param$mean_stab, ddG_param$sd)
ddG[which(ddG_param$cat==2)] = rnorm(subst_param$n_neu, ddG_param$mean_neu, ddG_param$sd)
ddG[which(ddG_param$cat==3)] = rnorm(subst_param$n_destab, ddG_param$mean_destab, ddG_param$sd)
ddG[which(ddG_param$cat==4)] = rnorm(subst_param$n_ifs, ddG_param$mean_ifs, ddG_param$sd)
print(sprintf("Generated %d ddGs with observed mean %.3f and std %.3f",length(ddG),mean(ddG),sd(ddG)))
ddG
hist(ddG)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
source("~/mega/binf/thesis/figures/synth/synth_real_ddg_dists/gmma05_analysis.r", echo=TRUE)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
source("~/mega/binf/thesis/figures/synth/synth_real_ddg_dists/gmma05_analysis.r", echo=TRUE)
source("~/mega/binf/thesis/figures/synth/synth_real_ddg_dists/gmma05_analysis.r", echo=TRUE)
source("~/mega/binf/thesis/figures/synth/synth_real_ddg_dists/gmma05_analysis.r", echo=TRUE)
# Histogram of ddG_glob
quartz(height=5, width=6)
# Histogram of ddG_glob
quartz(height=5, width=6)
# Histogram of ddG_glob
quartz(height=5, width=6)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
xaxis()
density(ddG)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
density(ddG)
plot(density(ddG))
plot(h, add=T, col="gray70")
# Histogram of ddG_glob
quartz(height=5, width=6)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
plot(density(ddG))
# Histogram of ddG_glob
quartz(height=5, width=6)
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
plot(density(ddG))
hist(subst$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), xlim=c(settings$glob_ddG_min,settings$glob_ddG_max), col="gray90", main="Global ddG fit", xlab = "ddGs [kcal/mol]")
h=hist(subst_sig$ddG_glob, breaks=seq(settings$glob_ddG_min,settings$glob_ddG_max,.2), plot=F)
plot(h, add=T, col="gray70")
legend("topright", c("Global fit","Low uncertainty"), col=c("gray90","gray70"), pch=15)
lines(density(ddG))
lines(density(subst$ddG_glob))
lines(density(ddG))
plot()
plot.new()
lines(density(subst$ddG_glob))
lines(density(ddG))
plot(density(subst$ddG_glob))
lines(density(ddG))
plot(density(ddG))
plot(density(subst$ddG_glob))
plot(density(ddG))
lines(density(subst$ddG_glob))
plot(density(ddG), xlim(c(-2,10)))
plot(density(ddG), xlim=(c(-2,10)))
lines(density(subst$ddG_glob))
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), c("red", "blue"))
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"))
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 15
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 15)
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
{
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
main("dsds")
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue", main = "dsad")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
source("~/mega/binf/thesis/figures/synth/synth_real_ddg_dists/gmma05_analysis.r", echo=TRUE)
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad", xlab = "")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad", xlab = "")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad", xlab = "ddGs [kcal/mol")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad", xlab = "ddGs [kcal/mol")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsad", xlab = "ddGs [kcal/mol")
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsadasdsadas", xlab = "ddGs [kcal/mol")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "dsadasdsadas", xlab = "ddGs [kcal/mol")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
{
plot(density(ddG), xlim=(c(-2,10)), col = "red", main = "ddGs values Laub real and synthetic data", xlab = "ddGs [kcal/mol]")
lines(density(subst$ddG_glob), xlim=(c(-2,10)), col = "blue")
legend("topright", c("Synthetic data","Laub data"), col = c("red", "blue"), pch = 1)
}
